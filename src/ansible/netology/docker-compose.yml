version: "3.3"

networks:
  net:
    driver: overlay
    attachable: true

volumes:
    prometheus: {}
    grafana: {}
    alertmanager: {}
    nginx_conf: {}
    letsencrypt_certs: {}
    certbot_acme_challenge: {}
    mysql_master: {}
    mysql_slave: {}
    wordpress: {}
    gitlab_logs: {}
    gitlab_data: {}
    gitlab_config: {}
    gitlab_runner_config: {}

configs:
  dockerd_config:
    file: ./dockerd-exporter/Caddyfile
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml

services:
  dockerd-exporter:
    image: stefanprodan/caddy
    networks:
      - net
    environment:
      - DOCKER_GWBRIDGE_IP=172.18.0.1
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: google/cadvisor
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: stefanprodan/swarmprom-grafana:5.3.4
    networks:
      - net
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      #- GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL:-localhost}
      #- GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      #- GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS:-grafana@test.com}
      #- GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME:-Grafana}
      #- GF_SMTP_HOST=${GF_SMTP_HOST:-smtp:25}
      #- GF_SMTP_USER=${GF_SMTP_USER}
      #- GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
    volumes:
      - grafana:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  alertmanager:
    image: stefanprodan/swarmprom-alertmanager:v0.14.0
    networks:
      - net
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
      - SLACK_USER=${SLACK_USER:-alertmanager}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  unsee:
    image: cloudflare/unsee:v0.8.0
    networks:
      - net
    environment:
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
    deploy:
      mode: replicated
      replicas: 1

  node-exporter:
    image: stefanprodan/swarmprom-node-exporter:v0.16.0
    networks:
      - net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: stefanprodan/swarmprom-prometheus:v2.5.0
    networks:
      - net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}'
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 128M

  nginx:
    image: ivkpa/itpot-nginx
    environment:
      DOMAINS: itpot.ru gitlab.itpot.ru grafana.itpot.ru prometheus.itpot.ru alertmanager.itpot.ru
      CERTBOT_EMAILS: itpot@kirpa.ru itpot@kirpa.ru itpot@kirpa.ru itpot@kirpa.ru itpot@kirpa.ru
      CERTBOT_TEST_CERT: 1
      CERTBOT_RSA_KEY_SIZE: 4096
    volumes:
      - ./nginx/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/vhosts:/etc/nginx/vhosts
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks:
      - net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node06.netology.yc

  certbot:
    image: ivkpa/itpot-certbot
    env_file:
      - ./nginx/config.env
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
    networks:
      - net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node06.netology.yc
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  mysql-master:
    image: 'percona:8.0'
    container_name: mysql-master
    hostname: mysql-master
    networks:
      - net
    volumes:
      - ./mysql/master.cnf:/etc/my.cnf.d/repl.cnf
      - ./mysql/master.sql:/docker-entrypoint-initdb.d/start.sql
      - mysql_master:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "toor"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node04.netology.yc

  mysql-slave:
    image: 'percona:8.0'
    container_name: mysql-slave
    hostname: mysql-slave
    networks:
      - net
    volumes:
      - ./mysql/slave.cnf:/etc/my.cnf.d/repl.cnf
      - ./mysql/slave.sql:/docker-entrypoint-initdb.d/start.sql
      - mysql_slave:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "toor"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node05.netology.yc

  mysql-proxy:
    image: nginx
    volumes:
      - ./mysql/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  wordpress:
    image: wordpress
    restart: always
    networks:
      - net
    environment:
      WORDPRESS_DB_HOST: mysql-proxy
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: toor
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DEBUG: 1
    volumes:
      - wordpress:/var/www/html
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node06.netology.yc

  gitlab:
    image: 'gitlab/gitlab-ee:latest'
    restart: always
    networks:
      - net
    environment:
      GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN: swkdfjgh324gtbjdhfbjdhfb234skdjfksjdfb
      GITLAB_ROOT_PASSWORD: toor1234
      GITLAB_OMNIBUS_CONFIG: |
        # Add any other gitlab.rb configuration here, each on its own line
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node06.netology.yc

  gitlab-runner:
    image: 'gitlab/gitlab-runner:latest'
    restart: always
    networks:
      - net
    volumes:
      - ./gitlab/:/gitlab-custom-config/
      - gitlab_runner_config:/etc/gitlab-runner
      - wordpress:/var/www/html
    entrypoint: [""]
    command: ["/bin/sh", "-c", "chmod +x /gitlab-custom-config/gitlab-runner-init.sh && ./gitlab-custom-config/gitlab-runner-init.sh"]
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == node06.netology.yc